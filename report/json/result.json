{"children":[{"id":"suite1","description":"ChronoUtilz","fullName":"ChronoUtilz","failedExpectations":[],"children":[{"id":"suite2","description":"getTimezoneOffset","fullName":"ChronoUtilz getTimezoneOffset","failedExpectations":[],"children":[{"id":"spec1","description":"should return a number for a valid Date object","fullName":"ChronoUtilz getTimezoneOffset should return a number for a valid Date object","passedExpectations":[{"matcherName":"() => {\n            const offset = (0, src_1.getTimezoneOffset)(new Date('2025-05-07'));\n            (0, chai_1.expect)(offset).to.be.a('number');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec2","description":"should return correct offset compared to native Date object","fullName":"ChronoUtilz getTimezoneOffset should return correct offset compared to native Date object","passedExpectations":[{"matcherName":"() => {\n            const expected = new Date('2025-05-07T00:00:00Z').getTimezoneOffset();\n            const actual = (0, src_1.getTimezoneOffset)('2025-05-07T00:00:00Z');\n            (0, chai_1.expect)(actual).to.equal(expected);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec3","description":"should return correct offset for timestamp","fullName":"ChronoUtilz getTimezoneOffset should return correct offset for timestamp","passedExpectations":[{"matcherName":"() => {\n            const timestamp = Date.UTC(2025, 4, 7);\n            const offset = (0, src_1.getTimezoneOffset)(timestamp);\n            (0, chai_1.expect)(offset).to.equal(-180);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec4","description":"should throw an error for invalid date string","fullName":"ChronoUtilz getTimezoneOffset should throw an error for invalid date string","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => (0, src_1.getTimezoneOffset)('invalid-date')).to.throw(src_1.ChronoUtilzError, 'ChronoUtilz Error: Unable to parse date: invalid-date');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite3","description":"parseDate","fullName":"ChronoUtilz parseDate","failedExpectations":[],"children":[{"id":"spec5","description":"should parse ISO date strings","fullName":"ChronoUtilz parseDate should parse ISO date strings","passedExpectations":[{"matcherName":"() => {\n            const result = (0, src_1.parseDate)('2025-05-07T12:30:45.678Z');\n            (0, chai_1.expect)(result).to.be.instanceOf(Date);\n            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.getFullYear()).to.equal(2025);\n            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.getMonth()).to.equal(4); // May is month 4 (0-indexed)\n            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.getDate()).to.equal(7);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec6","description":"should parse Date objects","fullName":"ChronoUtilz parseDate should parse Date objects","passedExpectations":[{"matcherName":"() => {\n            const original = new Date('2025-05-07');\n            const result = (0, src_1.parseDate)(original);\n            (0, chai_1.expect)(result).to.be.instanceOf(Date);\n            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.getTime()).to.equal(original.getTime());\n            // Should be a new instance, not the same reference\n            (0, chai_1.expect)(result).to.not.equal(original);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec7","description":"should parse timestamps","fullName":"ChronoUtilz parseDate should parse timestamps","passedExpectations":[{"matcherName":"() => {\n            const timestamp = new Date('2025-05-07').getTime();\n            const result = (0, src_1.parseDate)(timestamp);\n            (0, chai_1.expect)(result).to.be.instanceOf(Date);\n            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.getTime()).to.equal(timestamp);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec8","description":"should parse MM/DD/YYYY format","fullName":"ChronoUtilz parseDate should parse MM/DD/YYYY format","passedExpectations":[{"matcherName":"() => {\n            const result = (0, src_1.parseDate)('05/07/2025');\n            (0, chai_1.expect)(result).to.be.instanceOf(Date);\n            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.getFullYear()).to.equal(2025);\n            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.getMonth()).to.equal(4);\n            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.getDate()).to.equal(7);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec9","description":"should return null for invalid dates when throwError is false","fullName":"ChronoUtilz parseDate should return null for invalid dates when throwError is false","passedExpectations":[{"matcherName":"() => {\n            const result = (0, src_1.parseDate)('not-a-date', { throwError: false });\n            (0, chai_1.expect)(result).to.be.null;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec10","description":"should throw for invalid dates when throwError is true","fullName":"ChronoUtilz parseDate should throw for invalid dates when throwError is true","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => (0, src_1.parseDate)('not-a-date', { throwError: true })).to.throw();\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec11","description":"should return fallback for invalid dates","fullName":"ChronoUtilz parseDate should return fallback for invalid dates","passedExpectations":[{"matcherName":"() => {\n            const fallback = new Date('2020-01-01');\n            const result = (0, src_1.parseDate)('not-a-date', { fallback });\n            (0, chai_1.expect)(result).to.equal(fallback);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite4","description":"formatDate","fullName":"ChronoUtilz formatDate","failedExpectations":[],"children":[{"id":"spec12","description":"should format dates as YYYY-MM-DD by default","fullName":"ChronoUtilz formatDate should format dates as YYYY-MM-DD by default","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            (0, chai_1.expect)((0, src_1.formatDate)(date)).to.equal('2025-05-07');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec13","description":"should format dates as MM/DD/YYYY","fullName":"ChronoUtilz formatDate should format dates as MM/DD/YYYY","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            (0, chai_1.expect)((0, src_1.formatDate)(date, 'MM/DD/YYYY')).to.equal('05/07/2025');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec14","description":"should format dates as DD/MM/YYYY","fullName":"ChronoUtilz formatDate should format dates as DD/MM/YYYY","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            (0, chai_1.expect)((0, src_1.formatDate)(date, 'DD/MM/YYYY')).to.equal('07/05/2025');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec15","description":"should format dates with time","fullName":"ChronoUtilz formatDate should format dates with time","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07T14:30:00');\n            (0, chai_1.expect)((0, src_1.formatDate)(date, 'YYYY-MM-DD HH:mm:ss')).to.equal('2025-05-07 14:30:00');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec16","description":"should format dates with month names","fullName":"ChronoUtilz formatDate should format dates with month names","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            (0, chai_1.expect)((0, src_1.formatDate)(date, 'DD MMM YYYY')).to.equal('07 May 2025');\n            (0, chai_1.expect)((0, src_1.formatDate)(date, 'MMM DD, YYYY')).to.equal('May 07, 2025');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec17","description":"should format time only","fullName":"ChronoUtilz formatDate should format time only","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07T14:30:45');\n            (0, chai_1.expect)((0, src_1.formatDate)(date, 'HH:mm:ss')).to.equal('14:30:45');\n            (0, chai_1.expect)((0, src_1.formatDate)(date, 'hh:mm A')).to.equal('02:30 PM');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec18","description":"should throw for unsupported formats","fullName":"ChronoUtilz formatDate should throw for unsupported formats","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            // @ts-ignore\n            // - Testing runtime behavior with invalid input\n            (0, chai_1.expect)(() => (0, src_1.formatDate)(date, 'INVALID')).to.throw();\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite5","description":"addTime","fullName":"ChronoUtilz addTime","failedExpectations":[],"children":[{"id":"spec19","description":"should add days","fullName":"ChronoUtilz addTime should add days","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.addTime)(date, 5, 'day');\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2025-05-12');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec20","description":"should add months","fullName":"ChronoUtilz addTime should add months","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.addTime)(date, 3, 'month');\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2025-08-07');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec21","description":"should handle month overflow","fullName":"ChronoUtilz addTime should handle month overflow","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-12-07');\n            const result = (0, src_1.addTime)(date, 2, 'month');\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2026-02-07');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec22","description":"should add years","fullName":"ChronoUtilz addTime should add years","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.addTime)(date, 5, 'year');\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2030-05-07');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec23","description":"should add hours, minutes, seconds","fullName":"ChronoUtilz addTime should add hours, minutes, seconds","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07T12:00:00');\n            let result = (0, src_1.addTime)(date, 3, 'hour');\n            (0, chai_1.expect)(result.getHours()).to.equal(15);\n            result = (0, src_1.addTime)(date, 30, 'minute');\n            (0, chai_1.expect)(result.getMinutes()).to.equal(30);\n            result = (0, src_1.addTime)(date, 45, 'second');\n            (0, chai_1.expect)(result.getSeconds()).to.equal(45);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite6","description":"subtractTime","fullName":"ChronoUtilz subtractTime","failedExpectations":[],"children":[{"id":"spec24","description":"should subtract days","fullName":"ChronoUtilz subtractTime should subtract days","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.subtractTime)(date, 5, 'day');\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2025-05-02');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec25","description":"should subtract months","fullName":"ChronoUtilz subtractTime should subtract months","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.subtractTime)(date, 3, 'month');\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2025-02-07');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite7","description":"getDateDiff","fullName":"ChronoUtilz getDateDiff","failedExpectations":[],"children":[{"id":"spec26","description":"should calculate difference in days","fullName":"ChronoUtilz getDateDiff should calculate difference in days","passedExpectations":[{"matcherName":"() => {\n            const date1 = new Date('2025-05-10');\n            const date2 = new Date('2025-05-05');\n            (0, chai_1.expect)((0, src_1.getDateDiff)(date1, date2, 'day')).to.equal(5);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec27","description":"should calculate difference in months","fullName":"ChronoUtilz getDateDiff should calculate difference in months","passedExpectations":[{"matcherName":"() => {\n            const date1 = new Date('2025-08-07');\n            const date2 = new Date('2025-05-07');\n            (0, chai_1.expect)((0, src_1.getDateDiff)(date1, date2, 'month')).to.equal(3);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec28","description":"should handle negative differences","fullName":"ChronoUtilz getDateDiff should handle negative differences","passedExpectations":[{"matcherName":"() => {\n            const date1 = new Date('2025-05-05');\n            const date2 = new Date('2025-05-10');\n            (0, chai_1.expect)((0, src_1.getDateDiff)(date1, date2, 'day')).to.equal(-5);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite8","description":"isBetweenDates","fullName":"ChronoUtilz isBetweenDates","failedExpectations":[],"children":[{"id":"spec29","description":"should return true when date is between start and end (inclusive)","fullName":"ChronoUtilz isBetweenDates should return true when date is between start and end (inclusive)","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const start = new Date('2025-05-05');\n            const end = new Date('2025-05-10');\n            (0, chai_1.expect)((0, src_1.isBetweenDates)(date, start, end)).to.be.true;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec30","description":"should consider boundary dates when inclusive is true","fullName":"ChronoUtilz isBetweenDates should consider boundary dates when inclusive is true","passedExpectations":[{"matcherName":"() => {\n            const start = new Date('2025-05-05');\n            const end = new Date('2025-05-10');\n            (0, chai_1.expect)((0, src_1.isBetweenDates)(start, start, end)).to.be.true;\n            (0, chai_1.expect)((0, src_1.isBetweenDates)(end, start, end)).to.be.true;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec31","description":"should not consider boundary dates when inclusive is false","fullName":"ChronoUtilz isBetweenDates should not consider boundary dates when inclusive is false","passedExpectations":[{"matcherName":"() => {\n            const start = new Date('2025-05-05');\n            const end = new Date('2025-05-10');\n            (0, chai_1.expect)((0, src_1.isBetweenDates)(start, start, end, false)).to.be.false;\n            (0, chai_1.expect)((0, src_1.isBetweenDates)(end, start, end, false)).to.be.false;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec32","description":"should return false when date is outside range","fullName":"ChronoUtilz isBetweenDates should return false when date is outside range","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-12');\n            const start = new Date('2025-05-05');\n            const end = new Date('2025-05-10');\n            (0, chai_1.expect)((0, src_1.isBetweenDates)(date, start, end)).to.be.false;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite9","description":"isValidDate","fullName":"ChronoUtilz isValidDate","failedExpectations":[],"children":[{"id":"spec33","description":"should return true for valid dates","fullName":"ChronoUtilz isValidDate should return true for valid dates","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.isValidDate)(new Date())).to.be.true;\n            (0, chai_1.expect)((0, src_1.isValidDate)('2025-05-07')).to.be.true;\n            (0, chai_1.expect)((0, src_1.isValidDate)('05/07/2025')).to.be.true;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec34","description":"should return false for invalid dates","fullName":"ChronoUtilz isValidDate should return false for invalid dates","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.isValidDate)('not-a-date')).to.be.false;\n            (0, chai_1.expect)((0, src_1.isValidDate)(new Date('invalid'))).to.be.false;\n            (0, chai_1.expect)((0, src_1.isValidDate)('02/30/2025')).to.be.false;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite10","description":"startOf","fullName":"ChronoUtilz startOf","failedExpectations":[],"children":[{"id":"spec35","description":"should get start of day","fullName":"ChronoUtilz startOf should get start of day","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07T14:30:45.678');\n            const result = (0, src_1.startOf)(date, 'day');\n            (0, chai_1.expect)(result.getHours()).to.equal(0);\n            (0, chai_1.expect)(result.getMinutes()).to.equal(0);\n            (0, chai_1.expect)(result.getSeconds()).to.equal(0);\n            (0, chai_1.expect)(result.getMilliseconds()).to.equal(0);\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2025-05-07');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec36","description":"should get start of month","fullName":"ChronoUtilz startOf should get start of month","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.startOf)(date, 'month');\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2025-05-01');\n            (0, chai_1.expect)(result.getHours()).to.equal(0);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec37","description":"should get start of year","fullName":"ChronoUtilz startOf should get start of year","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.startOf)(date, 'year');\n            (0, chai_1.expect)((0, src_1.formatDate)(result)).to.equal('2025-01-01');\n            (0, chai_1.expect)(result.getHours()).to.equal(0);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite11","description":"endOf","fullName":"ChronoUtilz endOf","failedExpectations":[],"children":[{"id":"spec38","description":"should get end of day","fullName":"ChronoUtilz endOf should get end of day","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07T14:30:45.678');\n            const result = (0, src_1.endOf)(date, 'day');\n            (0, chai_1.expect)(result.getHours()).to.equal(23);\n            (0, chai_1.expect)(result.getMinutes()).to.equal(59);\n            (0, chai_1.expect)(result.getSeconds()).to.equal(59);\n            (0, chai_1.expect)(result.getMilliseconds()).to.equal(999);\n            (0, chai_1.expect)((0, src_1.formatDate)(result, 'YYYY-MM-DD')).to.equal('2025-05-07');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec39","description":"should get end of month","fullName":"ChronoUtilz endOf should get end of month","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.endOf)(date, 'month');\n            (0, chai_1.expect)((0, src_1.formatDate)(result, 'YYYY-MM-DD')).to.equal('2025-05-31');\n            (0, chai_1.expect)(result.getHours()).to.equal(23);\n            (0, chai_1.expect)(result.getMinutes()).to.equal(59);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec40","description":"should get end of year","fullName":"ChronoUtilz endOf should get end of year","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const result = (0, src_1.endOf)(date, 'year');\n            (0, chai_1.expect)((0, src_1.formatDate)(result, 'YYYY-MM-DD')).to.equal('2025-12-31');\n            (0, chai_1.expect)(result.getHours()).to.equal(23);\n            (0, chai_1.expect)(result.getMinutes()).to.equal(59);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite12","description":"getDayOfYear","fullName":"ChronoUtilz getDayOfYear","failedExpectations":[],"children":[{"id":"spec41","description":"should calculate day of year","fullName":"ChronoUtilz getDayOfYear should calculate day of year","passedExpectations":[{"matcherName":"() => {\n            // May 7th is the 127th day of a non-leap year\n            const date = new Date('2025-05-07');\n            (0, chai_1.expect)((0, src_1.getDayOfYear)(date)).to.equal(127);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec42","description":"should handle leap years","fullName":"ChronoUtilz getDayOfYear should handle leap years","passedExpectations":[{"matcherName":"() => {\n            // May 7th is the 128th day of a leap year\n            const date = new Date('2024-05-07');\n            (0, chai_1.expect)((0, src_1.getDayOfYear)(date)).to.equal(128);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite13","description":"getWeekOfYear","fullName":"ChronoUtilz getWeekOfYear","failedExpectations":[],"children":[{"id":"spec43","description":"should calculate week of year","fullName":"ChronoUtilz getWeekOfYear should calculate week of year","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            // The exact week number depends on the specific date and how weeks are calculated\n            (0, chai_1.expect)((0, src_1.getWeekOfYear)(date)).to.be.a('number');\n            (0, chai_1.expect)((0, src_1.getWeekOfYear)(date)).to.be.greaterThan(0);\n            (0, chai_1.expect)((0, src_1.getWeekOfYear)(date)).to.be.lessThan(54); // Maximum possible week number\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite14","description":"isLeapYear","fullName":"ChronoUtilz isLeapYear","failedExpectations":[],"children":[{"id":"spec44","description":"should identify leap years","fullName":"ChronoUtilz isLeapYear should identify leap years","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.isLeapYear)(2024)).to.be.true;\n            (0, chai_1.expect)((0, src_1.isLeapYear)(2028)).to.be.true;\n            (0, chai_1.expect)((0, src_1.isLeapYear)(2000)).to.be.true;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec45","description":"should identify non-leap years","fullName":"ChronoUtilz isLeapYear should identify non-leap years","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.isLeapYear)(2025)).to.be.false;\n            (0, chai_1.expect)((0, src_1.isLeapYear)(2100)).to.be.false;\n            (0, chai_1.expect)((0, src_1.isLeapYear)(2023)).to.be.false;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec46","description":"should work with date objects","fullName":"ChronoUtilz isLeapYear should work with date objects","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.isLeapYear)(new Date('2024-01-01'))).to.be.true;\n            (0, chai_1.expect)((0, src_1.isLeapYear)(new Date('2025-01-01'))).to.be.false;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite15","description":"toUTC","fullName":"ChronoUtilz toUTC","failedExpectations":[],"children":[{"id":"spec47","description":"should convert a local Date to UTC equivalent","fullName":"ChronoUtilz toUTC should convert a local Date to UTC equivalent","passedExpectations":[{"matcherName":"() => {\n            const localDate = new Date(2025, 4, 7, 12, 0, 0); // May 7, 2025, 12:00 local time\n            const result = (0, src_1.toUTC)(localDate);\n            const expectedUtc = new Date(localDate.getTime() + localDate.getTimezoneOffset() * 60000);\n            (0, chai_1.expect)(result.getTime()).to.equal(expectedUtc.getTime());\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec48","description":"should accept string date inputs","fullName":"ChronoUtilz toUTC should accept string date inputs","passedExpectations":[{"matcherName":"() => {\n            const localString = '2025-05-07T12:00:00';\n            const result = (0, src_1.toUTC)(localString);\n            const localDate = new Date(localString);\n            const expectedUtc = new Date(localDate.getTime() + localDate.getTimezoneOffset() * 60000);\n            (0, chai_1.expect)(result.getTime()).to.equal(expectedUtc.getTime());\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec49","description":"should throw if invalid date is provided","fullName":"ChronoUtilz toUTC should throw if invalid date is provided","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => (0, src_1.toUTC)('not-a-date')).to.throw(src_1.ChronoUtilzError, \"ChronoUtilz Error: Unable to parse date: not-a-date\");\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite16","description":"getTimezoneString","fullName":"ChronoUtilz getTimezoneString","failedExpectations":[],"children":[{"id":"spec50","description":"should return a string starting with \"UTC\"","fullName":"ChronoUtilz getTimezoneString should return a string starting with \"UTC\"","passedExpectations":[{"matcherName":"() => {\n            const result = (0, src_1.getTimezoneString)();\n            (0, chai_1.expect)(result.startsWith('UTC')).to.be.true;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec51","description":"should return a valid timezone format","fullName":"ChronoUtilz getTimezoneString should return a valid timezone format","passedExpectations":[{"matcherName":"() => {\n            const result = (0, src_1.getTimezoneString)();\n            const pattern = /^UTC[+-]\\d{2}:\\d{2}$/;\n            (0, chai_1.expect)(result).to.match(pattern);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec52","description":"should reflect correct offset from Date object","fullName":"ChronoUtilz getTimezoneString should reflect correct offset from Date object","passedExpectations":[{"matcherName":"() => {\n            const offset = new Date().getTimezoneOffset();\n            const sign = offset <= 0 ? '+' : '-';\n            const absOffset = Math.abs(offset);\n            const hours = Math.floor(absOffset / 60)\n                .toString()\n                .padStart(2, '0');\n            const minutes = (absOffset % 60).toString().padStart(2, '0');\n            const expected = `UTC${sign}${hours}:${minutes}`;\n            const result = (0, src_1.getTimezoneString)();\n            (0, chai_1.expect)(result).to.equal(expected);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite17","description":"utcNow","fullName":"ChronoUtilz utcNow","failedExpectations":[],"children":[{"id":"spec53","description":"should return a Date object","fullName":"ChronoUtilz utcNow should return a Date object","passedExpectations":[{"matcherName":"() => {\n            const result = (0, src_1.utcNow)();\n            (0, chai_1.expect)(result).to.be.an.instanceOf(Date);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec54","description":"should be approximately equal to current UTC time","fullName":"ChronoUtilz utcNow should be approximately equal to current UTC time","passedExpectations":[{"matcherName":"() => {\n            const localNow = new Date();\n            const expectedUtc = new Date(localNow.getTime() + localNow.getTimezoneOffset() * 60000);\n            const result = (0, src_1.utcNow)();\n            const diffInMs = Math.abs(result.getTime() - expectedUtc.getTime());\n            // Allow slight delay between executions (e.g., 10ms)\n            (0, chai_1.expect)(diffInMs).to.be.lessThan(20);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite18","description":"createDate","fullName":"ChronoUtilz createDate","failedExpectations":[],"children":[{"id":"spec55","description":"should create a valid date for year, month, and day","fullName":"ChronoUtilz createDate should create a valid date for year, month, and day","passedExpectations":[{"matcherName":"() => {\n            const date = (0, src_1.createDate)(2025, 4, 7); // May 7, 2025\n            (0, chai_1.expect)(date.getFullYear()).to.equal(2025);\n            (0, chai_1.expect)(date.getMonth()).to.equal(4); // May\n            (0, chai_1.expect)(date.getDate()).to.equal(7);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec56","description":"should default time components to zero if not provided","fullName":"ChronoUtilz createDate should default time components to zero if not provided","passedExpectations":[{"matcherName":"() => {\n            const date = (0, src_1.createDate)(2025, 4, 7);\n            (0, chai_1.expect)(date.getHours()).to.equal(0);\n            (0, chai_1.expect)(date.getMinutes()).to.equal(0);\n            (0, chai_1.expect)(date.getSeconds()).to.equal(0);\n            (0, chai_1.expect)(date.getMilliseconds()).to.equal(0);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec57","description":"should create a valid date with full time components","fullName":"ChronoUtilz createDate should create a valid date with full time components","passedExpectations":[{"matcherName":"() => {\n            const date = (0, src_1.createDate)(2025, 4, 7, 13, 45, 30, 500);\n            (0, chai_1.expect)(date.getHours()).to.equal(13);\n            (0, chai_1.expect)(date.getMinutes()).to.equal(45);\n            (0, chai_1.expect)(date.getSeconds()).to.equal(30);\n            (0, chai_1.expect)(date.getMilliseconds()).to.equal(500);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec58","description":"should throw if month is less than 0","fullName":"ChronoUtilz createDate should throw if month is less than 0","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => (0, src_1.createDate)(2025, -1, 10)).to.throw(src_1.ChronoUtilzError, /Month must be between 0 and 11/);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec59","description":"should throw if month is greater than 11","fullName":"ChronoUtilz createDate should throw if month is greater than 11","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => (0, src_1.createDate)(2025, 12, 10)).to.throw(src_1.ChronoUtilzError, /Month must be between 0 and 11/);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec60","description":"should throw if date is invalid (e.g., April 31)","fullName":"ChronoUtilz createDate should throw if date is invalid (e.g., April 31)","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => (0, src_1.createDate)(2025, 3, 31)).to.throw(src_1.ChronoUtilzError, /Invalid day 31 for month 3/);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec61","description":"should throw if components result in an invalid date (e.g., Feb 30)","fullName":"ChronoUtilz createDate should throw if components result in an invalid date (e.g., Feb 30)","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => (0, src_1.createDate)(2025, 1, 30)).to.throw(src_1.ChronoUtilzError, /Invalid day 30 for month 1/);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec62","description":"should allow Feb 29 on a leap year","fullName":"ChronoUtilz createDate should allow Feb 29 on a leap year","passedExpectations":[{"matcherName":"() => {\n            const date = (0, src_1.createDate)(2024, 1, 29);\n            (0, chai_1.expect)(date.getFullYear()).to.equal(2024);\n            (0, chai_1.expect)(date.getMonth()).to.equal(1); // February\n            (0, chai_1.expect)(date.getDate()).to.equal(29);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite19","description":"getDaysInMonth","fullName":"ChronoUtilz getDaysInMonth","failedExpectations":[],"children":[{"id":"spec63","description":"should get correct days for 30-day months","fullName":"ChronoUtilz getDaysInMonth should get correct days for 30-day months","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-04-01'))).to.equal(30); // April\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-06-01'))).to.equal(30); // June\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-09-01'))).to.equal(30); // September\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-11-01'))).to.equal(30); // November\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec64","description":"should get correct days for 31-day months","fullName":"ChronoUtilz getDaysInMonth should get correct days for 31-day months","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-01-01'))).to.equal(31); // January\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-03-01'))).to.equal(31); // March\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-05-01'))).to.equal(31); // May\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-07-01'))).to.equal(31); // July\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-08-01'))).to.equal(31); // August\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-10-01'))).to.equal(31); // October\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-12-01'))).to.equal(31); // December\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec65","description":"should handle February in leap and non-leap years","fullName":"ChronoUtilz getDaysInMonth should handle February in leap and non-leap years","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2024-02-01'))).to.equal(29); // Leap year\n            (0, chai_1.expect)((0, src_1.getDaysInMonth)(new Date('2025-02-01'))).to.equal(28); // Non-leap year\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite20","description":"getRelativeTime","fullName":"ChronoUtilz getRelativeTime","failedExpectations":[],"children":[{"id":"spec66","description":"should format future times","fullName":"ChronoUtilz getRelativeTime should format future times","passedExpectations":[{"matcherName":"() => {\n            const now = new Date();\n            const future = (0, src_1.addTime)(now, 5, 'minute');\n            (0, chai_1.expect)((0, src_1.getRelativeTime)(future)).to.equal('in 5 minutes');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec67","description":"should format past times","fullName":"ChronoUtilz getRelativeTime should format past times","passedExpectations":[{"matcherName":"() => {\n            const now = new Date();\n            const past = (0, src_1.subtractTime)(now, 3, 'hour');\n            (0, chai_1.expect)((0, src_1.getRelativeTime)(past)).to.equal('3 hours ago');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec68","description":"should handle just now","fullName":"ChronoUtilz getRelativeTime should handle just now","passedExpectations":[{"matcherName":"() => {\n            const now = new Date();\n            (0, chai_1.expect)((0, src_1.getRelativeTime)(now)).to.equal('just now');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec69","description":"should handle longer time periods","fullName":"ChronoUtilz getRelativeTime should handle longer time periods","passedExpectations":[{"matcherName":"() => {\n            const now = new Date();\n            const farFuture = (0, src_1.addTime)(now, 2, 'year');\n            (0, chai_1.expect)((0, src_1.getRelativeTime)(farFuture)).to.equal('in 2 years');\n            const farPast = (0, src_1.subtractTime)(now, 6, 'month');\n            (0, chai_1.expect)((0, src_1.getRelativeTime)(farPast)).to.equal('6 months ago');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite21","description":"CalendarDate","fullName":"ChronoUtilz CalendarDate","failedExpectations":[],"children":[{"id":"spec70","description":"should create from year, month, day","fullName":"ChronoUtilz CalendarDate should create from year, month, day","passedExpectations":[{"matcherName":"() => {\n            const calDate = new src_1.CalendarDate(2025, 5, 7);\n            (0, chai_1.expect)(calDate.year).to.equal(2025);\n            (0, chai_1.expect)(calDate.month).to.equal(5);\n            (0, chai_1.expect)(calDate.day).to.equal(7);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec71","description":"should convert to Date object","fullName":"ChronoUtilz CalendarDate should convert to Date object","passedExpectations":[{"matcherName":"() => {\n            const calDate = new src_1.CalendarDate(2025, 5, 7);\n            const date = calDate.toDate();\n            (0, chai_1.expect)(date.getFullYear()).to.equal(2025);\n            (0, chai_1.expect)(date.getMonth()).to.equal(4); // 0-indexed in Date\n            (0, chai_1.expect)(date.getDate()).to.equal(7);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec72","description":"should create from Date object","fullName":"ChronoUtilz CalendarDate should create from Date object","passedExpectations":[{"matcherName":"() => {\n            const date = new Date('2025-05-07');\n            const calDate = src_1.CalendarDate.fromDate(date);\n            (0, chai_1.expect)(calDate.year).to.equal(2025);\n            (0, chai_1.expect)(calDate.month).to.equal(5);\n            (0, chai_1.expect)(calDate.day).to.equal(7);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec73","description":"should compare dates correctly","fullName":"ChronoUtilz CalendarDate should compare dates correctly","passedExpectations":[{"matcherName":"() => {\n            const date1 = new src_1.CalendarDate(2025, 5, 7);\n            const date2 = new src_1.CalendarDate(2025, 5, 10);\n            const date3 = new src_1.CalendarDate(2025, 6, 1);\n            (0, chai_1.expect)(date1.isBefore(date2)).to.be.true;\n            (0, chai_1.expect)(date2.isAfter(date1)).to.be.true;\n            (0, chai_1.expect)(date1.isBefore(date3)).to.be.true;\n            (0, chai_1.expect)(date3.isAfter(date2)).to.be.true;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec74","description":"should add time","fullName":"ChronoUtilz CalendarDate should add time","passedExpectations":[{"matcherName":"() => {\n            const date = new src_1.CalendarDate(2025, 5, 7);\n            const newDate = date.add(3, 'day');\n            (0, chai_1.expect)(newDate.day).to.equal(10);\n            (0, chai_1.expect)(newDate.month).to.equal(5);\n            (0, chai_1.expect)(newDate.year).to.equal(2025);\n            const nextMonth = date.add(1, 'month');\n            (0, chai_1.expect)(nextMonth.month).to.equal(6);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec75","description":"should check equality","fullName":"ChronoUtilz CalendarDate should check equality","passedExpectations":[{"matcherName":"() => {\n            const date1 = new src_1.CalendarDate(2025, 5, 7);\n            const date2 = new src_1.CalendarDate(2025, 5, 7);\n            const date3 = new src_1.CalendarDate(2025, 5, 8);\n            (0, chai_1.expect)(date1.equals(date2)).to.be.true;\n            (0, chai_1.expect)(date1.equals(date3)).to.be.false;\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite22","description":"validateDateFormat","fullName":"ChronoUtilz validateDateFormat","failedExpectations":[],"children":[{"id":"spec76","description":"should validate YYYY-MM-DD format","fullName":"ChronoUtilz validateDateFormat should validate YYYY-MM-DD format","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('2025-05-07', 'YYYY-MM-DD')).to.be.true;\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('2025-13-07', 'YYYY-MM-DD')).to.be.false; // Invalid month\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('202-05-07', 'YYYY-MM-DD')).to.be.false; // Wrong format\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec77","description":"should validate MM/DD/YYYY format","fullName":"ChronoUtilz validateDateFormat should validate MM/DD/YYYY format","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('05/07/2025', 'MM/DD/YYYY')).to.be.true;\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('13/07/2025', 'MM/DD/YYYY')).to.be.false; // Invalid month\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec78","description":"should validate time formats","fullName":"ChronoUtilz validateDateFormat should validate time formats","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('14:30:00', 'HH:mm:ss')).to.be.true;\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('25:30:00', 'HH:mm:ss')).to.be.false; // Invalid hour\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('02:30 PM', 'hh:mm A')).to.be.true;\n            (0, chai_1.expect)((0, src_1.validateDateFormat)('14:30 PM', 'hh:mm A')).to.be.false; // 14 is not valid in 12-hour format\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite23","description":"generateDateRange","fullName":"ChronoUtilz generateDateRange","failedExpectations":[],"children":[{"id":"spec79","description":"should generate a daily inclusive date range","fullName":"ChronoUtilz generateDateRange should generate a daily inclusive date range","passedExpectations":[{"matcherName":"() => {\n            const range = src_1.ChronoUtilz.generateDateRange({\n                start: '2025-05-01',\n                end: '2025-05-03',\n                unit: 'day',\n                step: 1,\n            });\n            (0, chai_1.expect)(range).to.have.lengthOf(3);\n            (0, chai_1.expect)(range[0].toISOString()).to.include('2025-05-01');\n            (0, chai_1.expect)(range[2].toISOString()).to.include('2025-05-03');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec80","description":"should throw for invalid range","fullName":"ChronoUtilz generateDateRange should throw for invalid range","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => src_1.ChronoUtilz.generateDateRange({\n                start: '2025-05-10',\n                end: '2025-05-01',\n            })).to.throw('Start date must be before or equal to end date');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite24","description":"formatDuration","fullName":"ChronoUtilz formatDuration","failedExpectations":[],"children":[{"id":"spec81","description":"should format duration in long format by default","fullName":"ChronoUtilz formatDuration should format duration in long format by default","passedExpectations":[{"matcherName":"() => {\n            const formatted = src_1.ChronoUtilz.formatDuration(90061000); // 1d 1h 1m 1s\n            (0, chai_1.expect)(formatted).to.include('day');\n            (0, chai_1.expect)(formatted).to.include('hour');\n            (0, chai_1.expect)(formatted).to.include('minute');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec82","description":"should format duration in short format","fullName":"ChronoUtilz formatDuration should format duration in short format","passedExpectations":[{"matcherName":"() => {\n            const formatted = src_1.ChronoUtilz.formatDuration(90061000, {\n                longFormat: false,\n            });\n            (0, chai_1.expect)(formatted).to.match(/[0-9]+d.*[0-9]+h.*[0-9]+m/);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec83","description":"should handle 0 ms","fullName":"ChronoUtilz formatDuration should handle 0 ms","passedExpectations":[{"matcherName":"() => {\n            const formatted = src_1.ChronoUtilz.formatDuration(0);\n            (0, chai_1.expect)(formatted).to.equal('0 milliseconds');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite25","description":"getQuarter","fullName":"ChronoUtilz getQuarter","failedExpectations":[],"children":[{"id":"spec84","description":"should return correct quarter","fullName":"ChronoUtilz getQuarter should return correct quarter","passedExpectations":[{"matcherName":"() => {\n            const q = src_1.ChronoUtilz.getQuarter('2025-04-10');\n            (0, chai_1.expect)(q).to.equal(2);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec85","description":"should throw on invalid date","fullName":"ChronoUtilz getQuarter should throw on invalid date","passedExpectations":[{"matcherName":"() => {\n            (0, chai_1.expect)(() => src_1.ChronoUtilz.getQuarter('not-a-date')).to.throw();\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite26","description":"getBusinessDays","fullName":"ChronoUtilz getBusinessDays","failedExpectations":[],"children":[{"id":"spec86","description":"should count weekdays excluding weekends and holidays","fullName":"ChronoUtilz getBusinessDays should count weekdays excluding weekends and holidays","passedExpectations":[{"matcherName":"() => {\n            const holidays = ['2025-05-05']; // Monday\n            const count = src_1.ChronoUtilz.getBusinessDays('2025-05-01', '2025-05-07', holidays);\n            (0, chai_1.expect)(count).to.equal(4); // Excludes Sat, Sun, and holiday\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]},{"id":"suite27","description":"calculateAge","fullName":"ChronoUtilz calculateAge","failedExpectations":[],"children":[{"id":"spec87","description":"should return age in years","fullName":"ChronoUtilz calculateAge should return age in years","passedExpectations":[{"matcherName":"() => {\n            const age = src_1.ChronoUtilz.calculateAge('2000-05-01', {\n                referenceDate: '2025-05-07',\n            });\n            (0, chai_1.expect)(age).to.equal(25);\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"},{"id":"spec88","description":"should return detailed age in years, months, and days","fullName":"ChronoUtilz calculateAge should return detailed age in years, months, and days","passedExpectations":[{"matcherName":"() => {\n            const age = src_1.ChronoUtilz.calculateAge('1990-06-15', {\n                referenceDate: '2025-05-07',\n                units: ['year', 'month', 'day'],\n            });\n            (0, chai_1.expect)(age).to.have.all.keys('years', 'months', 'days');\n        }","message":"Passed.","stack":"","passed":true}],"pendingReason":"","status":"passed"}]}]}],"description":"suite execution"}